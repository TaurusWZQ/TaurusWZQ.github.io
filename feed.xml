<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>TaurusWZQ</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-08-22T12:23:17+00:00</updated> <author> <name>TaurusWZQ</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 TaurusWZQ </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C++中关于继承与访问权限的那些事</title><link href="/posts/third-post/" rel="alternate" type="text/html" title="C++中关于继承与访问权限的那些事" /><published>2022-08-12T10:00:00+00:00</published> <updated>2022-08-22T10:39:02+00:00</updated> <id>/posts/third-post/</id> <content src="/posts/third-post/" /> <author> <name>TaurusWZQ</name> </author> <category term="技术" /> <summary> C++中关于继承与访问权限的那些事 今天我们来讨论一下在C++中关于继承与访问权限的那些事？ 希望能够帮助大家真正的理解基类与派生类之间访问权限的问题。当然这也是一个在面试过程过很容易被问到的一个问题。 我们都知道继承（inheritance）是C++的三大特性之一。在继承的过程中会涉及很多的问题，访问权限就是其中之一。 注意：在具体说明访问权限如何变化之前，首先需要明确“派生类”与“派生类对象”不能混为一谈，前者是一个type，而后者是一个实例，是一个object。 接下来我们来讨论一下访问权限 C++通过public，protected，private 三个关键字来控制成员变量和成员函数的访问权限，它们分别表示公有的、受保护的、私有的，这三个keyword被称为成员访问限定符。 在类的内部(定义类的代码内部)，无论成员被声明为public, protected还是p... </summary> </entry> <entry><title>C++如何实现一个不能被继承的类</title><link href="/posts/second-post/" rel="alternate" type="text/html" title="C++如何实现一个不能被继承的类" /><published>2022-08-08T10:00:00+00:00</published> <updated>2022-08-15T14:56:09+00:00</updated> <id>/posts/second-post/</id> <content src="/posts/second-post/" /> <author> <name>TaurusWZQ</name> </author> <category term="技术" /> <summary> C++如何实现一个不能被继承的类～ 今天我们来讨论一下在C++中 如何设计一个类，使得该类不能被继承？ 这是一个在面试过程过很容易被问到的一个问题。 C++什么类不能被继承，首先思考派生类继承基类将会发生什么默认操作？派生类在调用自身的构造函数之前需要先调用基类的构造函数。那么我们就让这个不想被别人继承的类的构造函数无法被其派生类调用，从而能达到无法被继承的功能。 最直观的解决方案显然是就是将其基类的构造函数声明为私有的，这样就可以阻止子类构造对象了。 进一步思考，但是这样的话，就无法构造本身的对象了，就无法利用了。既然这样，我们又可以想定义一个静态方法来构造类和释放类。 对，就这样实现它。 #include&amp;lt;iostream&amp;gt; using namespace std; class A { public: static A * Construct(in... </summary> </entry> <entry><title>真正意义上的第一篇博客！</title><link href="/posts/first-post/" rel="alternate" type="text/html" title="真正意义上的第一篇博客！" /><published>2022-04-01T09:15:00+00:00</published> <updated>2022-08-08T13:06:33+00:00</updated> <id>/posts/first-post/</id> <content src="/posts/first-post/" /> <author> <name>TaurusWZQ</name> </author> <category term="随笔" /> <summary> 真正意义上的第一篇博客～ 现在是2022.04.01，以下是本该于2021.12.09发表的第一篇博客： 经历了重重困难，终于 小王的个人博客终于即将搭建完毕！！！！ 感想： 不知道该说些啥，断断续续的弄了半天，中间由于导师找，学院统一核酸检测，加上莫名其妙npm变量配置出问题，等等一系列问题。找了很多的帮助文档，教学贴，属实很麻烦。但是在按照教程加之自己摸索之后，在本地看到属于自己的博客之后，真的很开心，很激动，毕竟这是属于王同学自己的结晶。 规划： 这个博客主要用途是记录和分享自己学习经历。love&amp;amp;share 当然可能也会有一些个人碎碎念，毕竟目前的王同学还算的上一个文艺青年。同时由于王同学爱好有些广泛，因此大概率这个个人博客会略显“复杂”。 愿景： 希望王同学能在这条路上越走越远，希望这个博客能够长久的运营下去，希望多年后回过头来看，小王会不后悔，在某一天，做下... </summary> </entry> <entry><title>你好，世界！</title><link href="/posts/hello-world/" rel="alternate" type="text/html" title="你好，世界！" /><published>2022-03-26T02:34:00+00:00</published> <updated>2022-03-27T10:40:33+00:00</updated> <id>/posts/hello-world/</id> <content src="/posts/hello-world/" /> <author> <name>湾区书记汤姆</name> </author> <category term="随笔" /> <summary> 感谢关注～ 这里可以放代码片段噢～ //代码片段 int main(){ hello world; } </summary> </entry> </feed>
